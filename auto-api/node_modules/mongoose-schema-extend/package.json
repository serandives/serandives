{
  "name": "mongoose-schema-extend",
  "version": "0.1.4",
  "description": "mongoose schema inheritance and discriminator key extension",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "homepage": "https://github.com/briankircho/mongoose-schema-extend",
  "repository": {
    "type": "git",
    "url": "git://github.com/briankircho/mongoose-schema-extend.git"
  },
  "keywords": [
    "mongoose",
    "inheritance",
    "schema",
    "discriminator",
    "model"
  ],
  "author": {
    "name": "Brian Kirchoff",
    "email": "briankircho@gmail.com"
  },
  "contributors": [
    {
      "name": "Brian Kirchoff",
      "email": "briankircho@gmail.com"
    },
    {
      "name": "Ajay Sabhaney",
      "email": "ajay@mothercreative.com"
    },
    {
      "name": "Nicholas Calugar",
      "email": "njcalugar@gmail.com"
    }
  ],
  "license": "BSD",
  "dependencies": {
    "owl-deepcopy": "~0.0.1"
  },
  "devDependencies": {
    "mocha": "~1.3.2",
    "should": "~1.1.0"
  },
  "readme": "## mongoose-schema-extend\n\nImplements schema inheritance and an optional discriminator key which is useful for storing different types of related documents in a collection and fetching them with the correct model type.\n\n# Usage\n\nInstall via NPM\n\n    $ npm install mongoose-schema-extend\n\n# Schema Inheritance\n\nYou just require the library to add schema extend method\n\n```javascript\nvar mongoose = require('mongoose'),\n    extend = require('mongoose-schema-extend');\nvar Schema = mongoose.Schema;\n\nvar PersonSchema = new Schema({\n  name : String\n}, { collection : 'users' });\n\nvar EmployeeSchema = PersonSchema.extend({\n  department : String\n});\n\nvar Person = mongoose.model('Person', PersonSchema),\n    Employee = mongoose.model('Employee', EmployeeSchema);\n\nvar Brian = new Employee({\n  name : 'Brian Kirchoff',\n  department : 'Engineering'\n});\n\n...\n```\n\n# Discriminator Key\n\nBy adding the discriminatorKey schema option, a key is added to your saved documents with the model name and is used when finding documents of different types to set them to the correct model\n\n```javascript\n...\nvar VehicleSchema = mongoose.Schema({ \n  make : String,\n}, { collection : 'vehicles', discriminatorKey : '_type' });\n\nvar CarSchema = VehicleSchema.extend({\n  year : Number\n});\nvar BusSchema = VehicleSchema.extend({\n  route : Number\n})\n\nvar Vehicle = mongoose.model('vehicle', VehicleSchema),\n    Car = mongoose.model('car', CarSchema),\n    Bus = mongoose.model('bus', BusSchema);\n\nvar accord = new Car({ \n  make : 'Honda',\n  year : 1999\n});\nvar muni = new Bus({\n  make : 'Neoplan',\n  route : 33\n});\n\naccord.save(function(err) {\n  muni.save(function(err) {\n    // vehicles are saved with the _type key set to 'car' and 'bus'\n  });\n})\n\n```\n\nAt this point in MongoDB you will have documents similar to this\n\n    { \"_type\" : \"car\", \"make\" : \"Honda\", \"year\" : 1999, \"_id\" : ObjectId(\"5024460368368a3007000002\"), \"__v\" : 0 }\n    { \"_type\" : \"bus\", \"make\" : \"Neoplan\", \"route\" : 33, \"_id\" : ObjectId(\"5024460368368a3007000003\"), \"__v\" : 0 }\n\nWhen querying, the objects model prototype will be set based on the _type field, so they are fully functional\n\n```javascript\nVehicle.find({}, function(err, vehicles) {\n  console.log(vehicles[0]); // vehicles[0] instanceof Car === true\n  console.log(vehicles[1]); // vehicles[1] instanceof Bus === true\n});\n```\n\n# Tests\n\nTo run the tests install mocha\n\n    npm install mocha -g\n\nand then run\n\n    mocha\n\n\n",
  "readmeFilename": "README.md",
  "_id": "mongoose-schema-extend@0.1.4",
  "dist": {
    "shasum": "9216dfad59b81142b8ceede99c2fbaddeb7a142f"
  },
  "_from": "mongoose-schema-extend@*",
  "_resolved": "https://registry.npmjs.org/mongoose-schema-extend/-/mongoose-schema-extend-0.1.4.tgz"
}
